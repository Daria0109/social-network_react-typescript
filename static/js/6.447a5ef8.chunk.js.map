{"version":3,"sources":["components/Users/Users.module.css","components/common/Paginator/Paginator.module.css","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersPage.tsx"],"names":["module","exports","Paginator","totalUsersCount","pageSize","currentPage","setCurrentPage","portionSize","pageCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","onClick","filter","p","map","pageStyle","s","active_page","key","className","User","user","followingInProgress","unfollow","follow","id","user_block","user_left","to","src","photos","small","userPhoto","avatar","followed","btn","disabled","some","user_right","info","name","status","place","validate","values","UsersSearchForm","React","memo","onFilterChanged","useSelector","state","usersPage","enableReinitialize","initialValues","term","friend","String","onSubmit","setSubmitting","isSubmitting","type","as","value","Users","users","dispatch","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","page","Number","actualFilter","getUsers","query","pathname","followUser","userId","unfollowUser","filterForm","pageNumber","usersActions","u","UsersPage","isFetching","Preloader"],"mappings":"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","file":"static/js/6.447a5ef8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__3bE0l\",\"user_block\":\"Users_user_block__1raL4\",\"user_left\":\"Users_user_left__3Jnh0\",\"avatar\":\"Users_avatar__3zP4a\",\"btn\":\"Users_btn__1sVoZ\",\"user_right\":\"Users_user_right__1aXim\",\"info\":\"Users_info__12AM_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active_page\":\"Paginator_active_page__2tvbv\"};","import s from './Paginator.module.css';\r\nimport React, {FC, useState} from 'react';\r\n\r\ntype PaginatorPropsType = {\r\n  totalUsersCount: number\r\n  pageSize: number\r\n  currentPage: number\r\n  setCurrentPage: (pageNumber: number) => void\r\n  portionSize: number\r\n}\r\nconst Paginator: React.FC<PaginatorPropsType> = ({\r\n                                             totalUsersCount, pageSize, currentPage,\r\n                                             setCurrentPage, portionSize = 10\r\n                                           }) => {\r\n  const pageCount: number = Math.ceil(totalUsersCount / pageSize);\r\n  const pages: Array<number> = [];\r\n  for (let i = 1; i <= pageCount; i++) {\r\n    pages.push(i);\r\n  }\r\n  const portionCount = Math.ceil(pageCount / portionSize)\r\n  const [portionNumber, setPortionNumber] = useState(1);\r\n  const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n  const rightPortionPageNumber = portionNumber * portionSize;\r\n  return <>\r\n    {portionNumber > 1 &&\r\n    <button onClick={() => setPortionNumber(portionNumber - 1)}>PREV</button>}\r\n    {pages\r\n      .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n      .map((p: number, i: any) => {\r\n        const pageStyle = p === currentPage ? s.active_page : '';\r\n        return (\r\n          <span key={i}\r\n                className={pageStyle}\r\n                onClick={() => setCurrentPage(p)}> {p} </span>\r\n        )\r\n      })\r\n    }\r\n    {portionCount > portionNumber &&\r\n    <button onClick={() => setPortionNumber(portionNumber + 1)}>NEXT</button>}\r\n  </>\r\n}\r\nexport default Paginator;","import React from 'react';\r\nimport s from './Users.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport userPhoto from '../../assets/images/default-avatar.png';\r\nimport {UserType} from '../../redux/types/types';\r\nimport {UsersThunkType} from '../../redux/users-reducer/users-reducer';\r\n\r\ntype UserPropsType = {\r\n  user: UserType\r\n  followingInProgress: Array<number>\r\n  follow: (userId: number) => void\r\n  unfollow: (userId: number) => void\r\n}\r\nconst User: React.FC<UserPropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n  return <div key={user.id} className={s.user_block}>\r\n    <div className={s.user_left}>\r\n      <NavLink to={'/profile/' + user.id}>\r\n        <img src={user.photos.small ? user.photos.small : userPhoto} className={s.avatar}/>\r\n      </NavLink>\r\n      {user.followed\r\n        ? <button className={s.btn}\r\n                  disabled={followingInProgress.some(id => id === user.id)}\r\n                  onClick={() => unfollow(user.id)}>Unfollow</button>\r\n\r\n        : <button className={s.btn}\r\n                  disabled={followingInProgress.some(id => id === user.id)}\r\n                  onClick={() => follow(user.id)}>Follow</button>}\r\n    </div>\r\n\r\n    <div className={s.user_right}>\r\n      <div className={s.info}>\r\n        <div>{user.name}</div>\r\n        <div>{user.status}</div>\r\n      </div>\r\n      <div className={s.place}>\r\n        <div>{'user.location.country'}</div>\r\n        <div>{'user.location.city'}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n}\r\nexport default User;","import React from 'react';\r\nimport {Field, Form, Formik} from 'formik';\r\nimport {UsersSearchFormType} from '../../redux/types/types';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\n\r\n\r\nconst validate = (values: any) => {\r\n  const errors = {};\r\n  return errors\r\n}\r\n\r\ntype UsersSearchFormPropsType = {\r\n  onFilterChanged: (filter: UsersSearchFormType) => void\r\n}\r\ntype TempFilterFormType = {\r\n  term: string\r\n  friend: 'null' | 'true' | 'false'\r\n}\r\n\r\n\r\nconst UsersSearchForm: React.FC<UsersSearchFormPropsType> = React.memo(({onFilterChanged}) => {\r\n  const filter = useSelector<AppStateType, UsersSearchFormType>(state => state.usersPage.filter);\r\n\r\n  const submit = (values: TempFilterFormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void}) => {\r\n    const filter: UsersSearchFormType = {\r\n      term: values.term,\r\n      friend: values.friend === 'true' ? true : values.friend === 'false' ? false : null\r\n    }\r\n    onFilterChanged(filter);\r\n    setSubmitting(false)\r\n  }\r\n\r\n  return <div>\r\n    <Formik\r\n      enableReinitialize\r\n      initialValues={{term: filter.term, friend: String(filter.friend)} as TempFilterFormType}\r\n      validate={validate}\r\n      onSubmit={submit}\r\n    >\r\n      {({isSubmitting}) => (\r\n        <Form>\r\n          <Field type=\"text\" name=\"term\"/>\r\n          <Field name=\"friend\" as=\"select\">\r\n            <option value=\"null\">All</option>\r\n            <option value=\"true\">Followed</option>\r\n            <option value=\"false\">Unfollowed</option>\r\n          </Field>\r\n          <button type=\"submit\" disabled={isSubmitting}>Search</button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  </div>\r\n})\r\nexport default UsersSearchForm;","import React, {useEffect} from 'react';\r\nimport s from './Users.module.css';\r\nimport Paginator from '../common/Paginator/Paginator';\r\nimport User from './User';\r\nimport {UsersSearchFormType, UserType} from '../../redux/types/types';\r\nimport {follow, getUsers, unfollow, usersActions} from '../../redux/users-reducer/users-reducer';\r\nimport UsersSearchForm from './UsersSearchForm';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport { useHistory } from 'react-router-dom';\r\nimport * as queryString from 'querystring'\r\n\r\n\r\nexport type UsersPropsType = {\r\n}\r\ntype QueryParamsType = {\r\n  page?: string\r\n  term?: string\r\n  friend?: string\r\n}\r\n\r\n\r\nconst Users: React.FC<UsersPropsType> = function ({}) {\r\n  const totalUsersCount = useSelector<AppStateType, number>(state => state.usersPage.totalUsersCount);\r\n  const portionSize = useSelector<AppStateType, number>(state => state.usersPage.portionSize);\r\n  const pageSize = useSelector<AppStateType, number>(state => state.usersPage.pageSize)\r\n  const currentPage = useSelector<AppStateType, number>(state => state.usersPage.currentPage);\r\n  const users = useSelector<AppStateType, Array<UserType>>(state => state.usersPage.users);\r\n  const followingInProgress = useSelector<AppStateType, Array<number>>(state => state.usersPage.followingInProgress);\r\n  const filter = useSelector<AppStateType, UsersSearchFormType>(state => state.usersPage.filter);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType;\r\n\r\n    let actualPage = currentPage;\r\n    if (!!parsed.page) actualPage = Number(parsed.page);\r\n    let actualFilter = filter;\r\n    if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term};\r\n    switch (parsed.friend) {\r\n      case 'null':\r\n        actualFilter = {...actualFilter, friend: null};\r\n        break;\r\n      case 'true':\r\n        actualFilter = {...actualFilter, friend: true};\r\n        break;\r\n      case 'false':\r\n        actualFilter = {...actualFilter, friend: false};\r\n        break;\r\n    }\r\n\r\n    dispatch(getUsers(actualPage, pageSize, actualFilter))\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const query: QueryParamsType = {};\r\n    if (currentPage !== 1) query.page = String(currentPage);\r\n    if (filter.term) query.term = filter.term;\r\n    if (filter.friend !== null) query.friend = String(filter.friend)\r\n\r\n    history.push({\r\n      pathname: '/users',\r\n      search: queryString.stringify(query)\r\n    })\r\n  }, [filter, currentPage])\r\n\r\n  const onChangeCurrentPage = (pageNumber: number) => {\r\n    dispatch(usersActions.setCurrentPage(pageNumber));\r\n    dispatch(getUsers(pageNumber, pageSize, filter));\r\n  }\r\n  const onFilterChanged = (filterForm: UsersSearchFormType) => {\r\n    dispatch(getUsers(1, pageSize, filterForm));\r\n  }\r\n  const followUser = (userId: number) => {\r\n    dispatch(follow(userId))\r\n  }\r\n  const unfollowUser = (userId: number) => {\r\n    dispatch(unfollow(userId))\r\n  }\r\n\r\n\r\n  return <div className={s.users}>\r\n      <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n      <Paginator totalUsersCount={totalUsersCount}\r\n                 pageSize={pageSize}\r\n                 currentPage={currentPage}\r\n                 setCurrentPage={onChangeCurrentPage}\r\n                 portionSize={portionSize}/>\r\n      {\r\n        users.map(u => <User key={u.id}\r\n                             user={u}\r\n                             unfollow={unfollowUser}\r\n                             follow={followUser}\r\n                             followingInProgress={followingInProgress}/>)\r\n      }\r\n    </div>\r\n}\r\n\r\nexport default Users;","import {useSelector} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport React from 'react';\r\nimport Users from './Users';\r\nimport Preloader from '../common/Preloader/Preloader';\r\n\r\n\r\nconst UsersPage = () => {\r\n  const isFetching = useSelector<AppStateType, boolean>(state => state.usersPage.isFetching);\r\n\r\n  return (\r\n    <>\r\n      {isFetching ? <Preloader/> : null}\r\n      <Users/>\r\n    </>\r\n  )\r\n}\r\nexport default UsersPage;"],"sourceRoot":""}