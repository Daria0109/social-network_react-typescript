{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","name","id","avatar","to","className","c","dialog__item","src","alt","Message","text","maxLength10","maxLengthValidatorCreator","MessageForm","reduxForm","form","handleSubmit","onSubmit","createForm","Textarea","required","Dialogs","dialogsPage","addMessage","dialogElement","dialogs","map","d","key","messageElement","messages","m","dialog","message","value","mapStateToPropsForRedirect","state","isAuth","auth","dialogsActions","compose","connect","WrappedComponent","restProps"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,2B,oBCA5BD,EAAOC,QAAU,CAAC,OAAS,2BAA2B,aAAe,iCAAiC,KAAO,2B,wGCsB9FC,EAd6B,YAA+B,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,GAAIC,EAAS,EAATA,OAC7D,OACG,6BACK,kBAAC,IAAD,CAASC,GAAE,mBAAcF,IACrB,yBAAKG,UAAWC,IAAEC,cAClB,yBAAKF,UAAWC,IAAEH,OAAQK,IAAKL,EAAQM,IAAI,KAC3C,yBAAKJ,UAAWC,IAAEL,MAAOA,OCJ1BS,EALuB,YAAmB,IAARC,EAAO,EAAPA,KAC7C,OACI,6BAAMA,I,yBCERC,EAAcC,YAA0B,IACxCC,EACJC,YAAyC,CAACC,KAAM,WAAhDD,EAA4D,YAAqB,IAAnBE,EAAkB,EAAlBA,aAC9D,OACE,0BAAMC,SAAUD,GACbE,YAAgCC,IAAU,UAAW,iBAAkB,CAACC,IAAUT,IACnF,6BACE,6CA0COU,EAzB6B,YAAsC,IAA3BC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,WAM5DC,EAAgBF,EAAYG,QAAQC,KAAI,SAAAC,GAAC,OAC7C,kBAAC,EAAD,CAAYC,IAAKD,EAAE1B,GAAID,KAAM2B,EAAE3B,KAAMC,GAAI0B,EAAE1B,GAAIC,OAAQyB,EAAEzB,YAErD2B,EAAiBP,EAAYQ,SAASJ,KAAI,SAAAK,GAAC,OAC/C,kBAAC,EAAD,CAASH,IAAKG,EAAE9B,GAAIS,KAAMqB,EAAErB,UAE9B,OACE,yBAAKN,UAAWC,IAAEoB,SAChB,yBAAKrB,UAAWC,IAAE2B,QACfR,GAGH,yBAAKpB,UAAWC,IAAE4B,SACfJ,EACD,kBAAChB,EAAD,CAAaI,SAlBE,SAACiB,GACpBX,EAAWW,EAAMD,e,wBC7BfE,EAA6B,SAACC,GAAD,MAA6C,CAC9EC,OAAQD,EAAME,KAAKD,S,WCqBfd,E,OAAagB,EAAehB,WACnBiB,sBACbC,aAbsB,SAACL,GACvB,MAAO,CACLd,YAAac,EAAMd,eAYH,CAACC,gBDrBd,SAAgCmB,GAOrC,OAFmCD,YAClCN,EADkCM,EAJoB,SAAC,GAA4B,IAA3BJ,EAA0B,EAA1BA,OAAWM,EAAe,0BAC/E,OAAKN,EACE,kBAACK,EAAqBC,GADT,kBAAC,IAAD,CAAUxC,GAAG,gBCiBxBqC,CAIbnB","file":"static/js/5.3ce3f9aa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__hBxOI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"DialogItem_avatar__6vQlQ\",\"dialog__item\":\"DialogItem_dialog__item__1GAW4\",\"name\":\"DialogItem_name__hUZI7\"};","import React, {FC} from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport c from './DialogItem.module.css'\r\n\r\nexport type DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n    avatar: string\r\n}\r\nconst DialogItem: FC<DialogItemPropsType> = function ({name, id, avatar}) {\r\n    return (\r\n       <div>\r\n            <NavLink to={`/dialogs/${id}`}>\r\n                <div className={c.dialog__item}>\r\n                <img className={c.avatar} src={avatar} alt=\"\"/>\r\n                <div className={c.name}>{name}</div>\r\n                </div>\r\n            </NavLink>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React, {FC} from 'react';\r\n\r\n\r\nexport type MessagePropsType = {\r\n    text: string\r\n}\r\nconst Message: FC<MessagePropsType> = function ({text}) {\r\n    return (\r\n        <div>{text}</div>\r\n    )\r\n}\r\nexport default Message;","import React from 'react';\r\nimport c from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport {reduxForm, DecoratedComponentClass, DecoratedFormProps} from 'redux-form';\r\nimport {createForm, Textarea} from '../common/FormControls/FormControls';\r\nimport {maxLengthValidatorCreator, required} from '../utilities/validators/validators';\r\nimport {DialogsInitialStateType} from '../../redux/dialogs-reducer/dialogs-reducer';\r\n\r\n\r\nconst maxLength10 = maxLengthValidatorCreator(10);\r\nconst MessageForm: DecoratedComponentClass<MessageFormValuePropsType, DecoratedFormProps<MessageFormValuePropsType>> =\r\n  reduxForm<MessageFormValuePropsType, {}>({form: 'message'})(({handleSubmit}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {createForm<MessageFormKeysType>(Textarea, 'message', 'New message...', [required, maxLength10])}\r\n      <div>\r\n        <button>Send</button>\r\n      </div>\r\n    </form>\r\n  )\r\n})\r\n\r\n\r\ntype DialogsPropsType = {\r\n  dialogsPage: DialogsInitialStateType\r\n  addMessage: (message: string) => void\r\n}\r\n\r\ntype MessageFormValuePropsType = {\r\n  message: string\r\n}\r\ntype MessageFormKeysType = Extract<keyof MessageFormValuePropsType, string>\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = function ({dialogsPage, addMessage}) {\r\n\r\n  const onAddMessage = (value: MessageFormValuePropsType) => {\r\n    addMessage(value.message);\r\n  }\r\n\r\n  const dialogElement = dialogsPage.dialogs.map(d =>\r\n    <DialogItem key={d.id} name={d.name} id={d.id} avatar={d.avatar}/>)\r\n\r\n  const messageElement = dialogsPage.messages.map(m =>\r\n    <Message key={m.id} text={m.text}/>)\r\n\r\n  return (\r\n    <div className={c.dialogs}>\r\n      <div className={c.dialog}>\r\n        {dialogElement}\r\n      </div>\r\n\r\n      <div className={c.message}>\r\n        {messageElement}\r\n        <MessageForm onSubmit={onAddMessage}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Dialogs;","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\ntype mapStatePropsType = {\r\n  isAuth: boolean\r\n}\r\nconst mapStateToPropsForRedirect = (state: AppStateType): mapStatePropsType => ({\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<WCP> (WrappedComponent: React.ComponentType<WCP>) {\r\n  const RedirectComponent: React.FC<mapStatePropsType> = ({isAuth, ...restProps}) => {\r\n      if (!isAuth) return <Redirect to='/login'/>\r\n      return <WrappedComponent {...restProps as unknown as WCP}/>\r\n    }\r\n  const ConnectedRedirectComponent = connect<mapStatePropsType, {}, WCP, AppStateType>\r\n  (mapStateToPropsForRedirect)(RedirectComponent)\r\n  return ConnectedRedirectComponent\r\n}","import React, {ComponentType} from 'react';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {withAuthRedirect} from '../../hoc/WithAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {DialogType, MessageType} from '../../redux/types/types';\r\nimport {dialogsActions} from '../../redux/dialogs-reducer/dialogs-reducer';\r\n\r\ntype MapStatePropsType = {\r\n  dialogsPage: {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n  }\r\n}\r\ntype MapDispatchPropsType = {\r\n  addMessage: (message: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  }\r\n}\r\n\r\n// const AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n// const DialogsContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>\r\n// (mapStateToProps, {addMessage, updateMessage})(AuthRedirectComponent);\r\n// export default DialogsContainer;\r\n\r\nconst addMessage = dialogsActions.addMessage;\r\nexport default compose<ComponentType>(\r\n  connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>\r\n  (mapStateToProps, {addMessage}),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n\r\n\r\n// const DialogsContainer = function (props: DialogsPropsType) {\r\n//     let state = props.store.getState();\r\n//\r\n//     const addMessage = () => {\r\n//         let action = addMessageActionCreator();\r\n//         props.store.dispatch(action);\r\n//     }\r\n//     const updateMessage = (updatedMessageText: string) => {\r\n//         let action = updateMessageActionCreator(updatedMessageText);\r\n//         props.store.dispatch(action);\r\n//     }\r\n//\r\n//     return (\r\n//         <Dialogs dialogsPage={state.dialogsPage}\r\n//                  addMessage={addMessage}\r\n//                  updateMessage={updateMessage}/>\r\n//     )\r\n// }\r\n// export default DialogsContainer;\r\n"],"sourceRoot":""}