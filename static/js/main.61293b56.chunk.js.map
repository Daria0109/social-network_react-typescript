{"version":3,"sources":["redux/dialogs-reducer/dialogs-reducer.tsx","components/utilities/helpers/object-helpers.ts","redux/users-reducer/users-reducer.tsx","assets/images/preloader.gif","api/api.ts","components/Navbar/Navbar.module.css","redux/navbar-reducer/navbar-reducer.tsx","redux/auth-reducer/auth-reducer.tsx","redux/app-reducer/app-reducer.ts","redux/redux-store.tsx","components/Navbar/Friends/Friend/Friend.tsx","components/Navbar/Friends/Friends.tsx","components/Navbar/Friends/FriendsContainer.tsx","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","hoc/withSuspense.tsx","App.tsx","index.tsx","components/common/FormControls/FormControls.tsx","components/Header/Header.module.css","components/common/FormControls/FormControls.module.css","components/utilities/validators/validators.ts","components/Navbar/Friends/Friend/Friend.module.css","components/Navbar/Friends/Friends.module.css","redux/profile-reducer/profile-reducer.tsx","components/common/Preloader/Preloader.tsx"],"names":["ADD_MESSAGE","addMessage","message","type","initialState","dialogs","id","name","avatar","messages","text","dialogsReducer","state","action","updateObjInArray","items","itemId","objProp","newObjProps","map","item","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","follow","userId","unfollow","setUsers","users","setCurrentPage","pageNumber","toggleIsFetching","isFetching","toggleFollowingProgress","isFollowingProgress","getUsersTC","currentPage","pageSize","dispatch","a","usersAPI","getUsers","totalUsers","totalCount","followUnfollowFlow","apiMethod","actionCreator","resultCode","followTC","followUsers","bind","unfollowTC","unfollowUsers","totalUsersCount","portionSize","followingInProgress","usersReducer","followed","filter","module","exports","instance","axios","create","baseURL","withCredentials","headers","get","response","data","console","log","post","delete","headerAPI","getAuth","then","login","email","password","rememberMe","logout","profileAPI","getUserProfile","getStatus","updateStatus","status","put","friends","navbarReducer","SET_AUTH_USER_DATA","setAuthUserData","isAuth","payload","getAuthUserDataTC","authReducer","INITIALIZED_SUCCESS","initialized","appReducer","reducers","combineReducers","profilePage","profileReducer","dialogsPage","usersPage","navbar","auth","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Friend","props","to","className","c","friend","src","alt","Friends","friendElement","key","friends__section","FriendsContainer","connect","Navbar","nav","activeClassName","active","News","Music","Settings","Header","header","logo_block","logo","login_block","onClick","HeaderContainer","this","React","Component","maxLength20","maxLengthValidatorCreator","LoginForm","reduxForm","onSubmit","handleSubmit","createForm","Input","required","error","s","errorSubmit","length","stopSubmit","_error","formData","withSuspense","Suspense","fallback","DialogsContainer","lazy","UsersContainer","ProfileContainer","App","initializeApp","render","path","Preloader","rerenderEntireTree","ReactDOM","document","getElementById","subscribe","FormControl","input","meta","children","havingError","touched","formControl","Textarea","restProps","component","placeholder","validators","validate","value","undefined","max","ADD_POST","SET_USER_PROFILE","SET_STATUS","addPost","setStatus","getUserProfileTC","profile","posts","likesCount","newPost","preloader"],"mappings":"6JAAMA,EAAc,sCAETC,EAAa,SAACC,GAAD,MAAsB,CAACC,KAAMH,EAAaE,YAmB9DE,EAAe,CACjBC,QAAS,CACP,CAACC,GAAI,EAAGC,KAAM,SAAUC,OAAQ,uDAChC,CAACF,GAAI,EAAGC,KAAM,SAAUC,OAAQ,uDAChC,CAACF,GAAI,EAAGC,KAAM,QAASC,OAAQ,uDAC/B,CAACF,GAAI,EAAGC,KAAM,SAAUC,OAAQ,uDAChC,CAACF,GAAI,EAAGC,KAAM,QAASC,OAAQ,uDAC/B,CAACF,GAAI,EAAGC,KAAM,QAASC,OAAQ,uDAC/B,CAACF,GAAI,EAAGC,KAAM,SAAUC,OAAQ,wDAElCC,SAAU,CACR,CAACH,GAAI,EAAGI,KAAM,OACd,CAACJ,GAAI,EAAGI,KAAM,gBACd,CAACJ,GAAI,EAAGI,KAAM,uBAqBHC,IAjBM,WAAgG,IAA/FC,EAA8F,uDAAlER,EAAcS,EAAoD,uCAClH,OAAQA,EAAOV,MACb,KAAKH,EACH,OAAO,2BACFY,GADL,IAEEH,SAAS,GAAD,mBAAMG,EAAMH,UAAZ,CACN,CACEH,GAAI,EACJI,KAAMG,EAAOX,aAItB,QACG,OAAOU,K,8PCnDAE,EAAmB,SAACC,EAAmBC,EACnBC,EAAiBC,GAChD,OAAOH,EAAMI,KAAI,SAAAC,GACf,OAAOA,EAAKH,KAAaD,EAAlB,2BAA+BI,GAASF,GAAeE,MCGrDC,EAAS,+BACTC,EAAW,iCACXC,EAAY,kCACZC,EAAmB,yCACnBC,EAAwB,8CACxBC,EAAqB,2CAIrBC,EAAS,SAACC,GAAD,MAAqB,CAACzB,KAAMkB,EAAQO,WAC7CC,EAAW,SAACD,GAAD,MAAqB,CAACzB,KAAMmB,EAAUM,WACjDE,EAAW,SAACC,GAAD,MAA6B,CAAC5B,KAAMoB,EAAWQ,UAC1DC,EAAiB,SAACC,GAAD,MAAyB,CAAC9B,KAAMqB,EAAkBS,eAEnEC,EAAmB,SAACC,GAAD,MAA0B,CAAChC,KAAMuB,EAAoBS,eACxEC,EAA0B,SAACC,EAA8BT,GAA/B,MAAmD,CACxFzB,KAVuC,kDAUNkC,sBAAqBT,WAiB3CU,EAAa,SAACC,EAAqBC,GAC9C,8CAAO,WAAOC,GAAP,eAAAC,EAAA,6DACLD,EAASP,GAAiB,IADrB,SAEaS,IAASC,SAASL,EAAaC,GAF5C,OAEDT,EAFC,OAGLU,EAASP,GAAiB,IAC1BO,EAASX,EAASC,EAAMhB,QACxB0B,GA1B+BI,EA0BHd,EAAMe,WA1BqB,CAAC3C,KAAMsB,EAAuBoB,gBAqBhF,iCArByB,IAACA,IAqB1B,OAAP,uDAQIE,EAAkB,uCAAG,WAAON,EAAyBb,EACzBoB,EACAC,GAFP,SAAAP,EAAA,6DAGzBD,EAASL,GAAwB,EAAMR,IAHd,SAINoB,EAAUpB,GAJJ,OAKC,IALD,OAKdsB,YACTT,EAASQ,EAAcrB,IAEzBa,EAASL,GAAwB,EAAOR,IARf,2CAAH,4DAWXuB,EAAW,SAACvB,GACvB,8CAAO,WAAOa,GAAP,eAAAC,EAAA,6DACCM,EAAYL,IAASS,YAAYC,KAAKV,KADvC,SAECI,EAAmBN,EAAUb,EAAQoB,EAAWrB,GAFjD,2CAAP,uDAKW2B,EAAa,SAAC1B,GACzB,8CAAO,WAAOa,GAAP,eAAAC,EAAA,6DACCM,EAAYL,IAASY,cAAcF,KAAKV,KADzC,SAECI,EAAmBN,EAAUb,EAAQoB,EAAWnB,GAFjD,2CAAP,uDA0CEzB,EAAe,CACjB2B,MAAO,GACPS,SAAU,EACVgB,gBAAiB,EACjBjB,YAAa,EACbkB,YAAa,GACbtB,YAAY,EACZuB,oBAAqB,IAiDRC,IA9CI,WAA8F,IAA7F/C,EAA4F,uDAA7DR,EAAcS,EAA+C,uCAC9G,OAAQA,EAAOV,MACb,KAAKkB,EACH,OAAO,2BACFT,GADL,IAEEmB,MAAOjB,EAAiBF,EAAMmB,MAAOlB,EAAOe,OAAQ,KAAM,CAACgC,UAAU,MAEzE,KAAKtC,EACH,OAAO,2BACFV,GADL,IAEEmB,MAAOjB,EAAiBF,EAAMmB,MAAOlB,EAAOe,OAAQ,KAAM,CAACgC,UAAU,MAEzE,KAAKrC,EACH,OAAO,2BACFX,GADL,IAEEmB,MAAOlB,EAAOkB,QAElB,KAAKP,EACH,OAAO,2BACFZ,GADL,IAEE2B,YAAa1B,EAAOoB,aAExB,KAAKR,EACH,OAAO,2BACFb,GADL,IAEE4C,gBAAiB3C,EAAOgC,aAE5B,KAAKnB,EACH,OAAO,2BACFd,GADL,IAEEuB,WAAYtB,EAAOsB,aAGvB,IA3IqC,kDA4InC,OAAO,2BACFvB,GADL,IAEE8C,oBAAqB7C,EAAOwB,oBAAP,sBACbzB,EAAM8C,qBADO,CACc7C,EAAOe,SACtChB,EAAM8C,oBAAoBG,QAAO,SAAAvD,GAAE,OAAIA,IAAOO,EAAOe,YAE7D,QACE,OAAOhB,K,oBC/JbkD,EAAOC,QAAU,IAA0B,uC,2KCOrCC,E,OAAWC,EAAMC,OAAO,CAC5BC,QAAQ,gDACRC,iBAAiB,EACjBC,QAAS,CACP,UAAW,0CAIF1B,EAAW,CAOhBC,SAPgB,SAOPL,EAAqBC,GAAmB,OAAD,4HAC/BwB,EAASM,IAAT,qBAAqC/B,EAArC,kBAA0DC,IAD3B,cAChD+B,EADgD,OAE/CC,EAAQD,EAARC,KACLC,QAAQC,IAAIF,GAHwC,kBAI7CA,GAJ6C,8CAMhDpB,YAbgB,SAaJxB,GAAiB,OAAD,4HACXoC,EAASW,KAAT,iBAAwC/C,IAD7B,cAC5B2C,EAD4B,OAE3BC,EAAQD,EAARC,KAF2B,kBAGzBA,GAHyB,8CAK5BjB,cAlBgB,SAkBF3B,GAAiB,OAAD,4HACboC,EAASY,OAAT,iBAA0ChD,IAD7B,cAC9B2C,EAD8B,OAE7BC,EAAQD,EAARC,KAF6B,kBAG3BA,GAH2B,+CAQzBK,EAAY,CACvBC,QADuB,WAErB,OAAOd,EAASM,IAAT,WAAkCS,MAAK,SAAAR,GAC5C,OAAOA,EAASC,SAGpBQ,MANuB,SAMjBC,EAAeC,EAAkBC,GACrC,OAAOnB,EAASW,KAAT,cAAuC,CAACM,QAAOC,WAAUC,eAAaJ,MAAK,SAAAR,GAChF,OAAOA,EAASC,SAGpBY,OAXuB,WAYrB,OAAOpB,EAASY,OAAT,eAAyCG,MAAK,SAAAR,GACnD,OAAOA,EAASC,UAMTa,EAAa,CACxBC,eADwB,SACT1D,GACb,OAAOoC,EAASM,IAAT,kBAAqC1C,IAAUmD,MAAK,SAAAR,GACzD,OAAOA,EAASC,SAGpBe,UANwB,SAMd3D,GACR,OAAOoC,EAASM,IAAT,yBAAuC1C,IAAUmD,MAAK,SAAAR,GAC3D,OAAOA,EAASC,SAGpBgB,aAXwB,SAWXC,GACX,OAAOzB,EAAS0B,IAAT,iBAA+C,CAACD,WAASV,MAAK,SAAAR,GACnE,OAAOA,EAASC,W,+ECxEtBV,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,OAAS,yB,mHCS7E3D,EAAe,CACfuF,QAAS,CACL,CAACrF,GAAI,EAAGC,KAAM,SAAUC,OAAQ,uDAChC,CAACF,GAAI,EAAGC,KAAM,SAAUC,OAAQ,uDAChC,CAACF,GAAI,EAAGC,KAAM,QAASC,OAAQ,uDAC/B,CAACF,GAAI,EAAGC,KAAM,SAAUC,OAAQ,uDAChC,CAACF,GAAI,EAAGC,KAAM,QAASC,OAAQ,uDAC/B,CAACF,GAAI,EAAGC,KAAM,QAASC,OAAQ,uDAC/B,CAACF,GAAI,EAAGC,KAAM,SAAUC,OAAQ,yDAQzBoF,EAJK,WAA0D,IAAzDhF,EAAwD,uDAAhDR,EAC7B,OAAOQ,G,wDCjBDiF,EAAqB,0CAGdC,EAAkB,SAACxF,EAAmB2E,EAAsBD,EAAsBe,GAAhE,MAAqF,CAClH5F,KAAM0F,EAAoBG,QAAS,CAAC1F,KAAI2E,QAAOD,SAAQe,WAO5CE,EAAoB,WAC/B,8CAAO,WAAOxD,GAAP,uBAAAC,EAAA,sEACcmC,IAAUC,UADxB,OAEmB,KADlBN,EADD,QAEItB,aAAmB,EACDsB,EAAKA,KAAzBlE,EADoB,EACpBA,GAAI2E,EADgB,EAChBA,MAAOD,EADS,EACTA,MAChBvC,EAASqD,EAAgBxF,EAAI2E,EAAOD,GAAO,KAJxC,2CAAP,uDA4CI5E,EAAqC,CACzCE,GAAI,KACJ2E,MAAO,KACPD,MAAO,KACPe,QAAQ,GAiBKG,EAZK,WAAqE,IAApEtF,EAAmE,uDAA3DR,EAAcS,EAA6C,uCACtF,OAAQA,EAAOV,MACb,KAAK0F,EACH,OAAO,uCACFjF,GACAC,EAAOmF,SAFZ,IAGED,OAAQlF,EAAOkF,SAEnB,QACE,OAAOnF,I,kBC5EPuF,EAAsB,0CAmBtB/F,EAAoC,CACxCgG,aAAa,GAcAC,EAXI,WAAwE,IAAvEzF,EAAsE,uDAA9DR,EAAcS,EAAgD,uCACxF,OAAQA,EAAOV,MACb,KAAKgG,EACH,OAAO,2BACFvF,GADL,IAEEwF,aAAa,IAEjB,QACE,OAAOxF,ICrBT0F,EAAWC,YAAgB,CAC3BC,YAAaC,IACbC,YAAa/F,IACbgG,UAAWhD,IACXiD,OAAQhB,EACRiB,KAAMX,EACNY,KAAMC,IACNC,IAAKX,IAIHY,EAAmBC,OAAOC,sCAAwCC,IAClEC,EAAQC,YAAYhB,EAAUW,EAAiBM,YAAgBC,OAIrEN,OAAOG,MAAQA,EAEAA,Q,oHCZAI,EAVA,SAAUC,GACjB,OACA,kBAAC,IAAD,CAASC,GAAE,mBAAcD,EAAMnH,OAC/B,yBAAKqH,UAAWC,IAAEC,QACd,yBAAKF,UAAWC,IAAErH,OAAQuH,IAAKL,EAAMlH,OAAQwH,IAAKN,EAAMnH,OACxD,yBAAKqH,UAAWC,IAAEtH,MAAOmH,EAAMnH,SCQ5B0H,EAfC,SAAUP,GAEtB,IAAMQ,EAAgBR,EAAM/B,QAAQxE,KAAI,SAAA2G,GAAM,OAC1C,kBAAC,EAAD,CAAQK,IAAKL,EAAOxH,GAAIA,GAAIwH,EAAOxH,GAAIC,KAAMuH,EAAOvH,KAAMC,OAAQsH,EAAOtH,YAE7E,OACI,yBAAKoH,UAAWC,IAAElC,SACd,uCACA,yBAAKiC,UAAWC,IAAEO,kBACbF,KCIFG,EAFUC,aAVD,SAAC1H,GACrB,MAAO,CACH+E,QAAS/E,EAAMgG,OAAOjB,YAGF,SAAClD,GACzB,MAAO,KAIc6F,CACaL,GCQvBM,EAjBA,SAAUb,GAEjB,OACA,yBAAKE,UAAWC,IAAEW,KACd,yBAAKZ,UAAWC,IAAEzG,MAAM,kBAAC,IAAD,CAASuG,GAAG,WAAWc,gBAAiBZ,IAAEa,QAA1C,YACxB,yBAAKd,UAAWC,IAAEzG,MAAM,kBAAC,IAAD,CAASuG,GAAG,WAAWc,gBAAiBZ,IAAEa,QAA1C,aACxB,yBAAKd,UAAWC,IAAEzG,MAAM,kBAAC,IAAD,CAASuG,GAAG,SAASc,gBAAiBZ,IAAEa,QAAxC,UACxB,yBAAKd,UAAWC,IAAEzG,MAAM,kBAAC,IAAD,CAASuG,GAAG,QAAQc,gBAAiBZ,IAAEa,QAAvC,SACxB,yBAAKd,UAAWC,IAAEzG,MAAM,kBAAC,IAAD,CAASuG,GAAG,SAASc,gBAAiBZ,IAAEa,QAAxC,UACxB,yBAAKd,UAAWC,IAAEzG,MAAM,kBAAC,IAAD,CAASuG,GAAG,YAAYc,gBAAiBZ,IAAEa,QAA3C,aAExB,kBAAC,EAAD,QCbGC,EAPF,WACT,OACI,sCCKOC,EAPD,WACV,OACI,uCCKOC,EAPE,WACb,OACI,0C,iBCuBOC,EAjBqB,YAAoC,IAAzB9D,EAAwB,EAAxBA,MAAOe,EAAiB,EAAjBA,OAAQX,EAAS,EAATA,OAC5D,OACE,4BAAQwC,UAAWC,IAAEkB,QACnB,yBAAKnB,UAAWC,IAAEmB,YAChB,yBAAKpB,UAAWC,IAAEoB,KAAMlB,IAAI,qEAAqEC,IAAI,UAEvG,yBAAKJ,UAAWC,IAAEqB,aACfnD,EACG,yBAAK6B,UAAWC,IAAE7C,OACjBA,EACD,4BAAQmE,QAAS,kBAAM/D,MAAvB,WAEA,kBAAC,IAAD,CAASuC,GAAG,UAAZ,YCNNyB,G,uKACO,IAAD,EACwBC,KAAK3B,MAA9B1C,EADC,EACDA,MAAOe,EADN,EACMA,OAAQX,EADd,EACcA,OACtB,OAAO,kBAAC,EAAD,CAAQJ,MAAOA,EAAOe,OAAQA,EAAQX,OAAQA,Q,GAH3BkE,IAAMC,WAYrBjB,gBALS,SAAC1H,GAAD,MAA6C,CACnEoE,MAAOpE,EAAMiG,KAAK7B,MAClBe,OAAQnF,EAAMiG,KAAKd,UAKY,CAACE,oBAAmBb,OXO/B,WACpB,8CAAO,WAAO3C,GAAP,SAAAC,EAAA,sEACcmC,IAAUO,SADxB,OAEmB,IAFnB,OAEIlC,YACPT,EAASqD,EAAgB,KAAM,KAAM,MAAM,IAHxC,2CAAP,wDWVawC,CAGdc,I,gDClBKI,GAAcC,aAA0B,IACxCC,GAAYC,aAAoB,CAAC7C,KAAM,SAA3B6C,EAAqC,SAACjC,GACtD,OACE,0BAAMkC,SAAUlC,EAAMmC,cACnBC,aAAWC,KAAO,QAAS,WAAY,CAACC,KAAUR,KAClDM,aAAWC,KAAO,WAAY,cAAe,CAACC,KAAUR,KACxDM,aAAW,QAAS,aAAc,KAAM,GAAI,CAAC3J,KAAM,YAAa,eAEhEuH,EAAMuC,OAAS,yBAAKrC,UAAWsC,KAAEC,aAAczC,EAAMuC,OACtD,8CAmCS3B,gBAHW,SAAC1H,GAAD,MAA0B,CAClDmF,OAAQnF,EAAMiG,KAAKd,UAEqB,CAACf,MZ/BtB,SAACC,EAAeC,EAAkBC,GACrD,8CAAO,WAAO1C,GAAP,iBAAAC,EAAA,sEACcmC,IAAUG,MAAMC,EAAOC,EAAUC,GAD/C,OAEmB,KADlBX,EADD,QAEItB,WACPT,EAASwD,MAEL/F,EAAUsE,EAAK/D,SAAS2J,OAAS,EAAI5F,EAAK/D,SAAS,GAAK,gBAC5DgC,EAAS4H,YAAW,QAAS,CAACC,OAAQpK,MANnC,2CAAP,wDY8BaoI,EApBmB,YAA4B,IAAjBtD,EAAgB,EAAhBA,MAKzC,OALyD,EAATe,OAMvC,kBAAC,IAAD,CAAU4B,GAAG,aAItB,6BACE,qCACA,kBAAC+B,GAAD,CAAWE,SAXE,SAACW,GAChBvF,EAAMuF,EAAStF,MAAOsF,EAASrF,SAAUqF,EAASpF,mB,SCpCzCqF,GAAe,SAACjB,GAC3B,OAAO,SAAC7B,GAAD,OAAgB,kBAAC,IAAM+C,SAAP,CAAgBC,SAAU,4CAC/C,kBAACnB,EAAc7B,MCabiD,GAAmBrB,IAAMsB,MAAK,kBAAM,iCACpCC,GAAiBvB,IAAMsB,MAAK,kBAAM,iCAClCE,GAAmBxB,IAAMsB,MAAK,kBAAM,iCAUpCG,G,kLAEF1B,KAAK3B,MAAMsD,kB,+BAGX,OAAK3B,KAAK3B,MAAMtB,YAId,yBAAKwB,UAAU,eACb,kBAAC,GAAD,MACA,kBAAC,EAAD,MACA,yBAAKA,UAAU,uBACb,kBAAC,IAAD,CAAOqD,OAAQT,GAAaM,IAAmBI,KAAK,sBACpD,kBAAC,IAAD,CAAOD,OAAQT,GAAaG,IAAmBO,KAAK,aACpD,kBAAC,IAAD,CAAOD,OAAQT,GAAaK,IAAiBK,KAAK,WAClD,kBAAC,IAAD,CAAOD,OAAQ,kBAAM,kBAAC,EAAD,OAASC,KAAK,UACnC,kBAAC,IAAD,CAAOD,OAAQ,kBAAM,kBAAC,EAAD,OAAUC,KAAK,WACpC,kBAAC,IAAD,CAAOD,OAAQ,kBAAM,kBAAC,EAAD,OAAaC,KAAK,cACvC,kBAAC,IAAD,CAAOD,OAAQ,kBAAM,kBAAC,GAAD,OAAUC,KAAK,aAbjC,kBAACC,GAAA,EAAD,U,GANK7B,IAAMC,WA4BTjB,gBAHS,SAAC1H,GAAD,MAA6C,CACnEwF,YAAaxF,EAAMoG,IAAIZ,eAIvB,CAAC4E,cbhD0B,WAC3B,8CAAO,WAAOvI,GAAP,SAAAC,EAAA,sEACCD,EAASwD,KADV,OAELxD,EARwC,CAACtC,KAAMgG,IAM1C,2CAAP,wDa6CamC,CAGXyC,I,oBCpDAK,GAAqB,WACrBC,KAASJ,OACL,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAU5D,MAAOA,GACX,kBAAC,GAAD,QAEOiE,SAASC,eAAe,UAI/CH,KAEA/D,EAAMmE,WAAU,WACZJ,S,2LCTSK,EAAc,SAAC/D,GACoBA,EAAvCgE,MADoD,IAC7CC,EAAgCjE,EAAhCiE,KAAMC,EAA0BlE,EAA1BkE,SACdC,GAFoD,YACZnE,EADY,6BAEtCiE,EAAKG,SAAWH,EAAK1B,OACzC,OACE,yBAAKrC,UAAS,UAAKsC,IAAE6B,YAAP,YAAsBF,EAAc3B,IAAED,MAAQ,KAC1D,6BACG2B,GAEFC,GAAe,8BAAOF,EAAK1B,SASrB+B,EAAW,SAACtE,GAA8B,IAC9CgE,EAAuChE,EAAvCgE,MAA0BO,GAAavE,EAAhCiE,KAAgCjE,EAA1BkE,SADgC,YACNlE,EADM,8BAEpD,OACI,kBAAC+D,EAAgB/D,EAAO,8CAAcgE,EAAWO,MAQ1ClC,EAAQ,SAACrC,GAA2B,IACxCgE,EAAuChE,EAAvCgE,MAA0BO,GAAavE,EAAhCiE,KAAgCjE,EAA1BkE,SAD0B,YACAlE,EADA,8BAE9C,OACI,kBAAC+D,EAAgB/D,EAAO,2CAAWgE,EAAWO,MAIvCnC,EAAa,SAACoC,EAA6B3L,EAAc4L,EAC3CC,GAA0D,IAAzC1E,EAAwC,uDAA3B,GAAIhH,EAAuB,uDAAR,GAC1E,OACE,6BACE,kBAAC,IAAD,eAAOwL,UAAWA,EACX3L,KAAMA,EACN4L,YAAaA,EACbE,SAAUD,GACN1E,IALb,IAKuBhH,K,mBCvD3BoD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,YAAc,4BAA4B,MAAQ,sBAAsB,KAAO,uB,mBCAjID,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,YAAc,oC,gCCCpH,oEAAO,IAAMiG,EAA0B,SAACsC,GACtC,OAAOA,OAAQC,EAAY,qBAGhB9C,EAA4B,SAAC+C,GAAD,OAAgC,SAACF,GACxE,OAAQA,GAASA,EAAMlC,OAASoC,EAAzB,mCAA4DA,EAA5D,iBAA4ED,K,mBCNrFzI,EAAOC,QAAU,CAAC,OAAS,uBAAuB,OAAS,uBAAuB,KAAO,uB,mBCAzFD,EAAOC,QAAU,CAAC,iBAAmB,oC,2NCG/B0I,EAAW,mCACXC,EAAmB,2CACnBC,EAAa,qCAGNC,EAAU,SAACjI,GAAD,MAAmB,CAACxE,KAAMsM,EAAU9H,SAE9CkI,EAAY,SAACpH,GAAD,MAAqB,CAACtF,KAAMwM,EAAYlH,WAQpDqH,EAAmB,SAAClL,GAC/B,8CAAO,WAAOa,GAAP,eAAAC,EAAA,sEACc2C,IAAWC,eAAe1D,GADxC,OACC4C,EADD,OAEH/B,EAZmD,CAACtC,KAAMuM,EAAkBK,QAYpDvI,IAFrB,2CAAP,uDAKWe,EAAY,SAAC3D,GACxB,8CAAO,WAAOa,GAAP,eAAAC,EAAA,sEACc2C,IAAWE,UAAU3D,GADnC,OACC4C,EADD,OAEH/B,EAASoK,EAAUrI,IAFhB,2CAAP,uDAKWgB,EAAe,SAACC,GAC3B,8CAAO,WAAOhD,GAAP,SAAAC,EAAA,sEACc2C,IAAWG,aAAaC,GADtC,OAEqB,IAFrB,OAEMvC,YACPT,EAASoK,EAAUpH,IAHlB,2CAAP,uDA0CErF,EAAe,CACjB4M,MAAO,CACL,CACE1M,GAAI,EACJJ,QAAS,oBACT+M,WAAY,GACZzM,OAAQ,gFAEV,CACEF,GAAI,EACJJ,QAAS,wBACT+M,WAAY,GACZzM,OAAQ,iFAGZuM,QAAS,GACTtH,OAAQ,IA+BKgB,IA5BM,WAAyE,IAAxE7F,EAAuE,uDAA/DR,EAAcS,EAAiD,uCAC3F,OAAQA,EAAOV,MACb,KAAKsM,EACH,IAAIS,EAAU,CACZ5M,GAAI,EACJJ,QAASW,EAAO8D,KAChBsI,WAAY,EACZzM,OAAQ,uDAEV,OAAO,2BACFI,GADL,IAEEoM,MAAM,GAAD,mBAAMpM,EAAMoM,OAAZ,CAAmBE,MAE5B,KAAKR,EACH,OAAO,2BACF9L,GADL,IAEEmM,QAASlM,EAAOkM,UAEpB,KAAKJ,EACH,OAAO,2BACF/L,GADL,IAEE6E,OAAQ5E,EAAO4E,SAEnB,QACE,OAAO7E,K,gCCrHb,sCAceuK,IAP2B,SAAUzD,GAChD,OACI,6BACI,yBAAKK,IAAKoF,IAAWnF,IAAI,kB","file":"static/js/main.61293b56.chunk.js","sourcesContent":["const ADD_MESSAGE = 'samurai-network/dialogs/ADD-MESSAGE';\r\n\r\nexport let addMessage = (message: string) => ({type: ADD_MESSAGE, message} as const);\r\nexport type MessageActionsTypes = ReturnType<typeof addMessage>;\r\n\r\nexport type DialogType = {\r\n  id: number\r\n  name: string\r\n  avatar: string\r\n}\r\nexport type MessageType = {\r\n  id: number\r\n  text: string\r\n}\r\nexport type DialogsInitialStateType = {\r\n  dialogs: Array<DialogType>\r\n  messages: Array<MessageType>\r\n}\r\n\r\nexport type DialogsReducerType = typeof initialState;\r\n\r\nlet initialState = {\r\n  dialogs: [\r\n    {id: 1, name: 'Dimych', avatar: 'https://finance.kz/static/images/default-avatar.png'},\r\n    {id: 2, name: 'Viktor', avatar: 'https://finance.kz/static/images/default-avatar.png'},\r\n    {id: 3, name: 'Sveta', avatar: 'https://finance.kz/static/images/default-avatar.png'},\r\n    {id: 4, name: 'Valera', avatar: 'https://finance.kz/static/images/default-avatar.png'},\r\n    {id: 5, name: 'Sasha', avatar: 'https://finance.kz/static/images/default-avatar.png'},\r\n    {id: 6, name: 'Ignat', avatar: 'https://finance.kz/static/images/default-avatar.png'},\r\n    {id: 7, name: 'Valera', avatar: 'https://finance.kz/static/images/default-avatar.png'}\r\n  ],\r\n  messages: [\r\n    {id: 1, text: 'Hi!'},\r\n    {id: 2, text: 'How are you!'},\r\n    {id: 3, text: 'Hello, my friend!'}\r\n  ]\r\n}\r\n\r\nlet dialogsReducer = (state: DialogsReducerType = initialState, action: MessageActionsTypes): DialogsReducerType => {\r\n  switch (action.type) {\r\n    case ADD_MESSAGE:\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages,\r\n          {\r\n            id: 4,\r\n            text: action.message\r\n          }\r\n        ]\r\n      }\r\n   default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default dialogsReducer;","export const updateObjInArray = (items: Array<any>, itemId: number,\r\n                                 objProp: string, newObjProps: {[key: string]: any}) => {\r\n  return items.map(item => {\r\n    return item[objProp] === itemId ? {...item, ...newObjProps} : item\r\n  })\r\n}","import {usersAPI} from '../../api/api';\r\nimport {Dispatch} from 'react';\r\nimport {ThunkAction, ThunkDispatch} from 'redux-thunk';\r\nimport {AppStateType} from '../redux-store';\r\nimport {updateObjInArray} from '../../components/utilities/helpers/object-helpers';\r\n\r\nexport const FOLLOW = 'samurai-network/users/FOLLOW';\r\nexport const UNFOLLOW = 'samurai-network/users/UNFOLLOW';\r\nexport const SET_USERS = 'samurai-network/users/SET-USERS';\r\nexport const SET_CURRENT_PAGE = 'samurai-network/users/SET-CURRENT-PAGE';\r\nexport const SET_TOTAL_USERS_COUNT = 'samurai-network/users/SET-TOTAL-USERS-COUNT';\r\nexport const TOGGLE_IS_FETCHING = 'samurai-network/users/TOGGLE-IS-FETCHING'\r\nexport const TOGGLE_FOLLOWING_PROGRESS = 'samurai-network/users/TOGGLE-FOLLOWING-PROGRESS'\r\n\r\n// A c t i o n  C r e a t o r s\r\nexport const follow = (userId: number) => ({type: FOLLOW, userId} as const);\r\nexport const unfollow = (userId: number) => ({type: UNFOLLOW, userId} as const);\r\nexport const setUsers = (users: Array<UserType>) => ({type: SET_USERS, users} as const);\r\nexport const setCurrentPage = (pageNumber: number) => ({type: SET_CURRENT_PAGE, pageNumber} as const);\r\nexport const setTotalUsersCount = (totalUsers: number) => ({type: SET_TOTAL_USERS_COUNT, totalUsers} as const)\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\nexport const toggleFollowingProgress = (isFollowingProgress: boolean, userId: number) => ({\r\n  type: TOGGLE_FOLLOWING_PROGRESS, isFollowingProgress, userId\r\n} as const)\r\nexport type FollowUnfollowType = {\r\n  type: string\r\n  userId: number\r\n}\r\n\r\nexport type UsersActionsType = ReturnType<typeof follow> |\r\n  ReturnType<typeof unfollow> |\r\n  ReturnType<typeof setUsers> |\r\n  ReturnType<typeof setCurrentPage> |\r\n  ReturnType<typeof setTotalUsersCount> |\r\n  ReturnType<typeof toggleIsFetching> |\r\n  ReturnType<typeof toggleFollowingProgress>;\r\n\r\n// T h u n k  C r e a t o r s\r\nexport type ThunkType = ThunkAction<void, AppStateType, unknown, UsersActionsType>;\r\nexport const getUsersTC = (currentPage: number, pageSize: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleIsFetching(true));\r\n    let users = await usersAPI.getUsers(currentPage, pageSize);\r\n    dispatch(toggleIsFetching(false));\r\n    dispatch(setUsers(users.items));\r\n    dispatch(setTotalUsersCount(users.totalCount))\r\n  }\r\n}\r\nconst followUnfollowFlow = async (dispatch: Dispatch<any>, userId: number,\r\n                                  apiMethod: (userId: number) => Promise<FollowDataType>,\r\n                                  actionCreator: Function) => {\r\n  dispatch(toggleFollowingProgress(true, userId));\r\n  let result = await apiMethod(userId);\r\n  if (result.resultCode === 0) {\r\n    dispatch(actionCreator(userId))\r\n  }\r\n  dispatch(toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const followTC = (userId: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    const apiMethod = usersAPI.followUsers.bind(usersAPI);\r\n    await followUnfollowFlow(dispatch, userId, apiMethod, follow)\r\n  }\r\n}\r\nexport const unfollowTC = (userId: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    const apiMethod = usersAPI.unfollowUsers.bind(usersAPI);\r\n    await followUnfollowFlow(dispatch, userId, apiMethod, unfollow)\r\n  }\r\n}\r\nexport type getUsersTCType = ReturnType<typeof getUsersTC>\r\nexport type followTCType = ReturnType<typeof followTC>\r\nexport type unfollowTCType = ReturnType<typeof unfollowTC>\r\n\r\n\r\nexport type DataType = {\r\n  items: Array<UserType>\r\n  totalCount: number\r\n  error: string\r\n}\r\nexport type FollowDataType = {\r\n  resultCode: number\r\n  messages: Array<string>\r\n  data: {}\r\n}\r\nexport type UserType = {\r\n  name: string\r\n  id: number\r\n  uniqueUrlName: null\r\n  photos: {\r\n    small: null | undefined\r\n    large: null | undefined\r\n  }\r\n  status: null | string\r\n  followed: boolean\r\n};\r\nexport type UsersInitialStateType = {\r\n  users: Array<UserType>,\r\n  pageSize: number\r\n  totalUsersCount: number\r\n  currentPage: number\r\n  portionSize: number\r\n  isFetching: boolean\r\n  followingInProgress: Array<number>\r\n}\r\nexport type UsersReducerType = typeof initialState;\r\n\r\nlet initialState = {\r\n  users: [] as Array<UserType>,\r\n  pageSize: 5,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n  portionSize: 10,\r\n  isFetching: true,\r\n  followingInProgress: [] as Array<number>\r\n}\r\n\r\nlet usersReducer = (state: UsersInitialStateType = initialState, action: UsersActionsType): UsersReducerType => {\r\n  switch (action.type) {\r\n    case FOLLOW:\r\n      return {\r\n        ...state,\r\n        users: updateObjInArray(state.users, action.userId, 'id', {followed: true})\r\n      }\r\n    case UNFOLLOW:\r\n      return {\r\n        ...state,\r\n        users: updateObjInArray(state.users, action.userId, 'id', {followed: false})\r\n      };\r\n    case SET_USERS:\r\n      return {\r\n        ...state,\r\n        users: action.users\r\n      }\r\n    case SET_CURRENT_PAGE:\r\n      return {\r\n        ...state,\r\n        currentPage: action.pageNumber\r\n      }\r\n    case SET_TOTAL_USERS_COUNT:\r\n      return {\r\n        ...state,\r\n        totalUsersCount: action.totalUsers\r\n      }\r\n    case TOGGLE_IS_FETCHING:\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching\r\n      }\r\n\r\n    case TOGGLE_FOLLOWING_PROGRESS:\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFollowingProgress\r\n          ? [...state.followingInProgress, action.userId]\r\n          : state.followingInProgress.filter(id => id !== action.userId)\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\nexport default usersReducer;","module.exports = __webpack_public_path__ + \"static/media/preloader.f876d4b4.gif\";","import axios from 'axios';\r\nimport {DataType, FollowDataType} from '../redux/users-reducer/users-reducer';\r\nimport {AuthType} from '../redux/auth-reducer/auth-reducer'\r\nimport {ProfileType} from '../redux/profile-reducer/profile-reducer';\r\n\r\n\r\ntype InstanceType = typeof instance;\r\nconst instance = axios.create({\r\n  baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n  withCredentials: true,\r\n  headers: {\r\n    'API-KEY': 'bcb04db8-51e3-4a52-abad-1b8669db5951'\r\n  }\r\n})\r\n\r\nexport const usersAPI = {\r\n  // getUsers(currentPage: number, pageSize: number) {\r\n  //   return instance.get<DataType>(`users?page=${currentPage}&count=${pageSize}`)\r\n  //     .then(response => {\r\n  //     return response.data\r\n  //   })\r\n  // },\r\n  async getUsers(currentPage: number, pageSize: number) {\r\n    let response = await instance.get<DataType>(`users?page=${currentPage}&count=${pageSize}`)\r\n    let {data} = response;\r\n    console.log(data)\r\n    return data\r\n  },\r\n  async followUsers(userId: number) {\r\n    let response = await instance.post<FollowDataType>(`follow/${userId}`);\r\n    let {data} = response;\r\n    return data\r\n  },\r\n  async unfollowUsers(userId: number) {\r\n    let response = await instance.delete<FollowDataType>(`follow/${userId}`);\r\n    let {data} = response;\r\n    return data\r\n  }\r\n}\r\n\r\n\r\nexport const headerAPI = {\r\n  getAuth() {\r\n    return instance.get<AuthType>(`auth/me`).then(response => {\r\n      return response.data\r\n    })\r\n  },\r\n  login(email: string, password: string, rememberMe: boolean) {\r\n    return instance.post<AuthType>(`/auth/login`, {email, password, rememberMe}).then(response => {\r\n      return response.data\r\n    })\r\n  },\r\n  logout() {\r\n    return instance.delete<AuthType>(`/auth/login`).then(response => {\r\n      return response.data\r\n    })\r\n  }\r\n}\r\n\r\n\r\nexport const profileAPI = {\r\n  getUserProfile(userId: number) {\r\n    return instance.get<ProfileType>(`profile/${userId}`).then(response => {\r\n      return response.data\r\n    })\r\n  },\r\n  getStatus(userId: number) {\r\n    return instance.get<string>(`profile/status/${userId}`).then(response => {\r\n      return response.data\r\n    })\r\n  },\r\n  updateStatus(status: string) {\r\n    return instance.put<FollowDataType>(`profile/status`, {status}).then(response => {\r\n      return response.data\r\n    })\r\n  }\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__mTtkA\",\"item\":\"Navbar_item__2Y4wl\",\"active\":\"Navbar_active__3-pQo\"};","export type NavbarReducerType = typeof initialState;\r\nexport type NavbarInitialStateType = {\r\n    friends: Array<FriendType>\r\n}\r\nexport type FriendType = {\r\n    id: number\r\n    name: string\r\n    avatar: string\r\n}\r\n\r\nlet initialState = {\r\n    friends: [\r\n        {id: 1, name: 'Dimych', avatar: 'https://finance.kz/static/images/default-avatar.png'},\r\n        {id: 2, name: 'Viktor', avatar: 'https://finance.kz/static/images/default-avatar.png'},\r\n        {id: 3, name: 'Sveta', avatar: 'https://finance.kz/static/images/default-avatar.png'},\r\n        {id: 4, name: 'Valera', avatar: 'https://finance.kz/static/images/default-avatar.png'},\r\n        {id: 5, name: 'Sasha', avatar: 'https://finance.kz/static/images/default-avatar.png'},\r\n        {id: 6, name: 'Ignat', avatar: 'https://finance.kz/static/images/default-avatar.png'},\r\n        {id: 7, name: 'Valera', avatar: 'https://finance.kz/static/images/default-avatar.png'}\r\n    ]\r\n}\r\n\r\nlet navbarReducer = (state = initialState, action: any):NavbarReducerType => {\r\nreturn state;\r\n}\r\n\r\nexport default navbarReducer;","import {headerAPI} from '../../api/api';\r\nimport {ThunkAction} from 'redux-thunk';\r\nimport {AppStateType} from '../redux-store';\r\nimport {stopSubmit} from 'redux-form';\r\nimport {FormAction} from 'redux-form/lib/actions';\r\n\r\nconst SET_AUTH_USER_DATA = 'samurai-network/auth/SET-AUTH-USER-DATA';\r\n\r\n// A c t i o n  C r e a t o r s\r\nexport const setAuthUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n  type: SET_AUTH_USER_DATA, payload: {id, email, login}, isAuth\r\n} as const)\r\nexport type AuthActionsType = ReturnType<typeof setAuthUserData>;\r\ntype ThunkActionsType = AuthActionsType | FormAction\r\n\r\n// T h u n k  C r e a t o r s\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ThunkActionsType>\r\nexport const getAuthUserDataTC = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    const data = await headerAPI.getAuth();\r\n    if (data.resultCode === 0) {\r\n      let {id, email, login} = data.data;\r\n      dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n  }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean): ThunkType => {\r\n  return async (dispatch) => {\r\n    const data = await headerAPI.login(email, password, rememberMe);\r\n    if (data.resultCode === 0) {\r\n      dispatch(getAuthUserDataTC());\r\n    } else {\r\n      let message = data.messages.length > 0 ? data.messages[0] : 'Another error'\r\n      dispatch(stopSubmit('login', {_error: message}))\r\n    }\r\n  }\r\n}\r\nexport const logout = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    const data = await headerAPI.logout();\r\n    if (data.resultCode === 0) {\r\n      dispatch(setAuthUserData(null, null, null, false));\r\n    }\r\n  }\r\n}\r\n\r\nexport type DataType = {\r\n  id: number\r\n  email: string\r\n  login: string\r\n}\r\nexport type AuthType = {\r\n  data: DataType\r\n  resultCode: number\r\n  messages: Array<string>\r\n}\r\nexport type AuthInitialStateType = {\r\n  id: number | null\r\n  email: string | null\r\n  login: string | null\r\n  isAuth: boolean\r\n}\r\nconst initialState: AuthInitialStateType = {\r\n  id: null,\r\n  email: null,\r\n  login: null,\r\n  isAuth: false\r\n}\r\nexport type AuthReducerType = typeof initialState;\r\n\r\n\r\nconst authReducer = (state = initialState, action: AuthActionsType): AuthReducerType => {\r\n  switch (action.type) {\r\n    case SET_AUTH_USER_DATA:\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n        isAuth: action.isAuth\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport default authReducer;","import {ThunkAction} from 'redux-thunk';\r\nimport {AppStateType} from '../redux-store'\r\nimport {getAuthUserDataTC} from '../auth-reducer/auth-reducer';\r\n\r\nconst INITIALIZED_SUCCESS = 'samurai-network/app/INITIALIZED-SUCCESS';\r\n\r\n// A c t i o n  C r e a t o r s\r\nexport const setInitializedSuccess = () => ({type: INITIALIZED_SUCCESS} as const)\r\nexport type AppActionsType = ReturnType<typeof setInitializedSuccess>;\r\n\r\n// T h u n k  C r e a t o r s\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, AppActionsType>\r\nexport const initializeApp = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    await dispatch(getAuthUserDataTC());\r\n    dispatch(setInitializedSuccess())\r\n  }\r\n}\r\n\r\nexport type AppInitialStateType = {\r\n  initialized: boolean\r\n}\r\n\r\nconst initialState: AppInitialStateType = {\r\n  initialized: false\r\n}\r\n\r\nconst appReducer = (state = initialState, action: AppActionsType): AppInitialStateType => {\r\n  switch (action.type) {\r\n    case INITIALIZED_SUCCESS:\r\n      return {\r\n        ...state,\r\n        initialized: true\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport default appReducer;","import {createStore, combineReducers, applyMiddleware, compose} from 'redux';\r\nimport profileReducer from './profile-reducer/profile-reducer';\r\nimport dialogsReducer from './dialogs-reducer/dialogs-reducer';\r\nimport navbarReducer from './navbar-reducer/navbar-reducer';\r\nimport usersReducer from './users-reducer/users-reducer';\r\nimport authReducer from './auth-reducer/auth-reducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport appReducer from './app-reducer/app-reducer';\r\n\r\n\r\nexport type RootStoreType = typeof reducers;\r\nexport type AppStateType = ReturnType<RootStoreType>\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    navbar: navbarReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;","import {NavLink} from 'react-router-dom';\r\nimport React from 'react';\r\nimport c from './Friend.module.css'\r\n\r\n\r\ntype FriendPropsType = {\r\n    id: number\r\n    name: string\r\n    avatar: string\r\n}\r\nconst Friend = function (props: FriendPropsType) {\r\n        return (\r\n        <NavLink to={`/profile/${props.name}`}>\r\n        <div className={c.friend}>\r\n            <img className={c.avatar} src={props.avatar} alt={props.name}/>\r\n            <div className={c.name}>{props.name}</div>\r\n        </div>\r\n    </NavLink>\r\n    )\r\n}\r\nexport default Friend;","import React from 'react';\r\nimport c from './Friends.module.css'\r\nimport Friend from './Friend/Friend';\r\nimport {FriendType} from '../../../redux/navbar-reducer/navbar-reducer';\r\n\r\ntype FriendsPropsType = {\r\n        friends: Array<FriendType>\r\n}\r\nconst Friends = function (props: FriendsPropsType) {\r\n\r\n    const friendElement = props.friends.map(friend =>\r\n        <Friend key={friend.id} id={friend.id} name={friend.name} avatar={friend.avatar}/>)\r\n\r\n    return (\r\n        <div className={c.friends}>\r\n            <h3>Friends</h3>\r\n            <div className={c.friends__section}>\r\n                {friendElement}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Friends;","import {connect} from 'react-redux';\r\nimport Friends from './Friends';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\nimport {FriendType} from '../../../redux/navbar-reducer/navbar-reducer';\r\n\r\ntype MapStatePropsType = {\r\n    friends: Array<FriendType>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        friends: state.navbar.friends\r\n    }\r\n}\r\nconst  mapDispatchToProps = (dispatch: () => void) => {\r\n    return {\r\n    }\r\n}\r\n\r\nconst FriendsContainer = connect<MapStatePropsType, {}, {}, AppStateType>\r\n(mapStateToProps, mapDispatchToProps)(Friends);\r\nexport default FriendsContainer;","import React from 'react';\r\nimport c from './Navbar.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\nimport Friends from './Friends/Friends';\r\nimport FriendsContainer from './Friends/FriendsContainer';\r\n\r\n\r\ntype NavbarPropsType = {\r\n    // store: RootStoreType\r\n}\r\n\r\nconst Navbar = function (props: NavbarPropsType) {\r\n    // let state = props.store;\r\n        return (\r\n        <nav className={c.nav}>\r\n            <div className={c.item}><NavLink to='/profile' activeClassName={c.active}>Profile</NavLink></div>\r\n            <div className={c.item}><NavLink to='/dialogs' activeClassName={c.active}>Messages</NavLink></div>\r\n            <div className={c.item}><NavLink to='/users' activeClassName={c.active}>Users</NavLink></div>\r\n            <div className={c.item}><NavLink to='/news' activeClassName={c.active}>News</NavLink></div>\r\n            <div className={c.item}><NavLink to='/music' activeClassName={c.active}>Music</NavLink></div>\r\n            <div className={c.item}><NavLink to='/settings' activeClassName={c.active}>Settings</NavLink></div>\r\n\r\n            <FriendsContainer/>\r\n\r\n        </nav>\r\n\r\n    )\r\n}\r\nexport default Navbar","import React from 'react';\r\n\r\nconst News = function() {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\nexport default News;","import React from 'react';\r\n\r\nconst Music = function() {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\nexport default Music;","import React from 'react';\r\n\r\nconst Settings = function () {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\nexport default Settings;","import React, {FC} from 'react';\r\nimport c from './Header.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype HeaderPropsType = {\r\n  login: string | null\r\n  isAuth: boolean\r\n  logout: () => void\r\n}\r\n\r\nconst Header: FC<HeaderPropsType> = function ({login, isAuth, logout}) {\r\n  return (\r\n    <header className={c.header}>\r\n      <div className={c.logo_block}>\r\n        <img className={c.logo} src=\"https://www.freelogodesign.org/Content/img/logo-samples/flooop.png\" alt=\"Logo\"/>\r\n      </div>\r\n      <div className={c.login_block}>\r\n        {isAuth\r\n          ? <div className={c.login}>\r\n            {login}\r\n            <button onClick={() => logout()}>LogOut</button>\r\n          </div>\r\n          : <NavLink to='/login'>LogIn</NavLink>}\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\nexport default Header","import React from 'react';\r\nimport Header from './Header';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {getAuthUserDataTC, logout} from '../../redux/auth-reducer/auth-reducer';\r\n\r\ntype MapStatePropsType = {\r\n  login: string | null\r\n  isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n  getAuthUserDataTC: any\r\n  logout: () => void\r\n}\r\nexport type HeaderContainerPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerPropsType> {\r\n  render () {\r\n    const {login, isAuth, logout} = this.props;\r\n    return <Header login={login} isAuth={isAuth} logout={logout}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n  login: state.auth.login,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect<MapStatePropsType,\r\n  MapDispatchPropsType, {},\r\n  AppStateType>(mapStateToProps, {getAuthUserDataTC, logout})\r\n(HeaderContainer);\r\n","import React, {FC} from 'react';\r\nimport {reduxForm, InjectedFormProps} from 'redux-form';\r\nimport {maxLengthValidatorCreator, required} from '../utilities/validators/validators';\r\nimport {createForm, Input} from '../common/FormControls/FormControls';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {login} from '../../redux/auth-reducer/auth-reducer';\r\nimport { Redirect } from 'react-router-dom';\r\nimport s from '../common/FormControls/FormControls.module.css'\r\n\r\n\r\ntype LoginFormPropsType = {}\r\n\r\nconst maxLength20 = maxLengthValidatorCreator(20);\r\nconst LoginForm = reduxForm<any, any>({form: 'login'})((props: InjectedFormProps<LoginValuesPropsType>) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      {createForm(Input, 'email', 'Email...', [required, maxLength20])}\r\n      {createForm(Input, 'password', 'Password...', [required, maxLength20])}\r\n      {createForm('input', 'rememberMe', null, [], {type: 'checkbox'}, 'remember me')}\r\n\r\n      {props.error && <div className={s.errorSubmit}>{props.error}</div>}\r\n      <button>Submit</button>\r\n    </form>\r\n  )\r\n})\r\n\r\n\r\ntype LoginValuesPropsType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n}\r\ntype LoginPropsType = {\r\n  login: (email: string, password: string, rememberMe: boolean) => void\r\n  isAuth: boolean\r\n}\r\nconst Login: FC<LoginPropsType> = function ({login, isAuth}) {\r\n  const onSubmit = (formData: LoginValuesPropsType) => {\r\n    login(formData.email, formData.password, formData.rememberMe)\r\n  }\r\n\r\n    if (isAuth) {\r\n      return <Redirect to='/profile'/>\r\n    }\r\n\r\n    return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      <LoginForm onSubmit={onSubmit}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStatePropsType = (state: AppStateType) => ({\r\n  isAuth: state.auth.isAuth\r\n})\r\nexport default connect(mapStatePropsType, {login})(Login);","import Preloader from '../components/common/Preloader/Preloader';\r\nimport React from 'react';\r\n\r\nexport const withSuspense = (Component: React.FC) => {\r\n  return (props: any) => <React.Suspense fallback={<div>Loading...</div>}>\r\n    <Component {...props}/>\r\n  </React.Suspense>\r\n}","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport News from './components/News/News';\nimport Music from './components/Music/Music';\nimport Settings from './components/Settings/Settings';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport Login from './components/Login/Login';\nimport {connect} from 'react-redux';\nimport {AppStateType} from './redux/redux-store';\nimport {initializeApp} from './redux/app-reducer/app-reducer';\nimport Preloader from './components/common/Preloader/Preloader';\nimport {withSuspense} from './hoc/withSuspense';\n\n// import DialogsContainer from './components/Dialogs/DialogsContainer';\n// import UsersContainer from './components/Users/UsersContainer';\n// import ProfileContainer from './components/Profile/ProfileContainer';\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\n\ntype MapStatePropsType = {\n  initialized: boolean\n}\ntype MapDispatchPropsType = {\n  initializeApp: () => void\n}\ntype AppPropsType = MapStatePropsType & MapDispatchPropsType\n\nclass App extends React.Component<AppPropsType> {\n  componentDidMount() {\n    this.props.initializeApp();\n  }\n  render() {\n    if (!this.props.initialized) {\n      return <Preloader/>\n    }\n    return (\n      <div className='app-wrapper'>\n        <HeaderContainer/>\n        <Navbar/>\n        <div className='app-wrapper-content'>\n          <Route render={withSuspense(ProfileContainer)} path='/profile/:userId?'/>\n          <Route render={withSuspense(DialogsContainer)} path='/dialogs'/>\n          <Route render={withSuspense(UsersContainer)} path=\"/users\"/>\n          <Route render={() => <News/>} path='/news'/>\n          <Route render={() => <Music/>} path='/music'/>\n          <Route render={() => <Settings/>} path='/settings'/>\n          <Route render={() => <Login/>} path='/login'/>\n        </div>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\n  initialized: state.app.initialized\n})\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(\n  mapStateToProps,\n  {initializeApp}\n  )(App);\n","import React from 'react';\nimport './index.css';\nimport store from './redux/redux-store'\nimport App from './App';\nimport {HashRouter} from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\n\nlet rerenderEntireTree = () => {\n    ReactDOM.render(\n        <HashRouter>\n          <Provider store={store}>\n                <App />\n          </Provider>\n        </HashRouter>, document.getElementById('root')\n    );\n}\n\nrerenderEntireTree();\n\nstore.subscribe(() => {\n    rerenderEntireTree()\n});\n\n\n","import React, {FC} from 'react';\r\nimport {WrappedFieldInputProps, WrappedFieldMetaProps} from 'redux-form/lib/Field';\r\nimport s from './FormControls.module.css'\r\nimport {Field} from 'redux-form';\r\n\r\nexport interface WrappedFieldProps {\r\n  input: WrappedFieldInputProps;\r\n  meta: WrappedFieldMetaProps;\r\n}\r\ntype FormControlPropsType = {\r\n  placeholder: string\r\n  children: React.ReactNode\r\n} & WrappedFieldProps\r\nexport const FormControl = (props: FormControlPropsType) => {\r\n  const {input, meta, children, ...restProps} = props;\r\n  const havingError = meta.touched && meta.error;\r\n  return (\r\n    <div className={`${s.formControl} ${havingError ? s.error : ''}`}>\r\n      <div>\r\n        {children}\r\n      </div>\r\n      {havingError && <span>{meta.error}</span>}\r\n    </div>\r\n  )\r\n}\r\n\r\ntype TextareaPropsType = {\r\n  placeholder: string\r\n  children: React.ReactNode\r\n} & WrappedFieldProps\r\nexport const Textarea = (props: TextareaPropsType) => {\r\n  const {input, meta, children, ...restProps} = props;\r\n  return (\r\n      <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n  )\r\n}\r\n\r\ntype InputPropsType = {\r\n  placeholder: string\r\n  children: React.ReactNode\r\n} & WrappedFieldProps\r\nexport const Input = (props: InputPropsType) => {\r\n  const {input, meta, children, ...restProps} = props;\r\n  return (\r\n      <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n  )\r\n}\r\n\r\nexport const createForm = (component: string | FC<any>, name: string, placeholder: null | string,\r\n                           validators: any, props: any = {}, text: string = '' ) => {\r\n  return (\r\n    <div>\r\n      <Field component={component}\r\n             name={name}\r\n             placeholder={placeholder}\r\n             validate={validators}\r\n             {...props}/> {text}\r\n    </div>\r\n  )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__Qc8HG\",\"login_block\":\"Header_login_block__4ec_F\",\"login\":\"Header_login__2-sLY\",\"logo\":\"Header_logo__1pRGz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__3gxOg\",\"error\":\"FormControls_error__6tueN\",\"errorSubmit\":\"FormControls_errorSubmit__RqJa1\"};","type ValidatorType = (value: string | null) => undefined | string\r\n\r\nexport const required: ValidatorType = (value) => {\r\n  return value ? undefined : 'Field is required'\r\n}\r\n\r\nexport const maxLengthValidatorCreator = (max: number): ValidatorType => (value) => {\r\n  return (value && value.length > max) ? `Field can't be more than ${max} symbols` : undefined\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend\":\"Friend_friend__3PsN9\",\"avatar\":\"Friend_avatar__2xJil\",\"name\":\"Friend_name__6Tgbo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friends__section\":\"Friends_friends__section___elUS\"};","import {profileAPI} from '../../api/api';\r\nimport {ThunkAction} from 'redux-thunk';\r\nimport {AppStateType} from '../redux-store';\r\n\r\nconst ADD_POST = 'samurai-network/profile/ADD-POST';\r\nconst SET_USER_PROFILE = 'samurai-network/profile/SET-USER-PROFILE';\r\nconst SET_STATUS = 'samurai-network/profile/SET-STATUS'\r\n\r\n// A c t i o n  C r e a t o r s\r\nexport const addPost = (post: string) => ({type: ADD_POST, post} as const);\r\nexport const setUserProfile = (profile: ProfileType) => ({type: SET_USER_PROFILE, profile} as const)\r\nexport const setStatus = (status: string) => ({type: SET_STATUS, status} as const)\r\nexport type PostActionsTypes = ReturnType<typeof addPost> |\r\n  ReturnType<typeof setUserProfile> |\r\n  ReturnType<typeof setStatus>;\r\n\r\n\r\n// T h u n k  C r e a t o r s\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, PostActionsTypes>\r\nexport const getUserProfileTC = (userId: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    const data = await profileAPI.getUserProfile(userId);\r\n      dispatch(setUserProfile(data));\r\n  }\r\n}\r\nexport const getStatus = (userId: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    const data = await profileAPI.getStatus(userId);\r\n      dispatch(setStatus(data))\r\n  }\r\n}\r\nexport const updateStatus = (status: string): ThunkType => {\r\n  return async (dispatch) => {\r\n    const data = await profileAPI.updateStatus(status);\r\n      if (data.resultCode === 0) {\r\n        dispatch(setStatus(status))\r\n      }\r\n  }\r\n}\r\n\r\nexport type PostType = {\r\n  id: number\r\n  message: string\r\n  likesCount: number\r\n  avatar: string\r\n};\r\nexport type ProfileInitialStateType = {\r\n  posts: Array<PostType>\r\n  profile: ProfileType\r\n  status: string\r\n}\r\nexport type ProfileType = {\r\n  aboutMe: string\r\n  contacts: {\r\n    facebook: string\r\n    website: null | string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: null | string\r\n    github: string\r\n    mainLink: null | string\r\n  },\r\n  lookingForAJob: boolean\r\n  lookingForAJobDescription: string\r\n  fullName: string\r\n  userId: number\r\n  photos: {\r\n    large: string\r\n    small: string\r\n  }\r\n}\r\nexport type ProfileReducerType = typeof initialState;\r\n\r\nlet initialState = {\r\n  posts: [\r\n    {\r\n      id: 1,\r\n      message: 'Hey, how are you?',\r\n      likesCount: 15,\r\n      avatar: 'https://i.pinimg.com/originals/32/3b/c2/323bc2e28f35a760b8d7afe48f3ffe48.png'\r\n    },\r\n    {\r\n      id: 2,\r\n      message: 'This is my first post',\r\n      likesCount: 25,\r\n      avatar: 'https://i.pinimg.com/originals/5a/f1/dd/5af1ddcde07255e8a999abcc061dd201.png'\r\n    }\r\n  ],\r\n  profile: {} as ProfileType,\r\n  status: ''\r\n}\r\n\r\nlet profileReducer = (state = initialState, action: PostActionsTypes): ProfileReducerType => {\r\n  switch (action.type) {\r\n    case ADD_POST:\r\n      let newPost = {\r\n        id: 5,\r\n        message: action.post,\r\n        likesCount: 0,\r\n        avatar: 'https://finance.kz/static/images/default-avatar.png'\r\n      }\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, newPost],\r\n      }\r\n    case SET_USER_PROFILE:\r\n      return {\r\n        ...state,\r\n        profile: action.profile\r\n      };\r\n    case SET_STATUS:\r\n      return {\r\n        ...state,\r\n        status: action.status\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default profileReducer;","import preloader from '../../../assets/images/preloader.gif';\r\nimport React, {FC} from 'react';\r\n\r\ntype PreloaderPropsType = {\r\n\r\n}\r\n\r\nconst Preloader: FC<PreloaderPropsType> = function (props) {\r\n    return (\r\n        <div>\r\n            <img src={preloader} alt=\"Preloader\"/>\r\n        </div>\r\n    )\r\n}\r\nexport default Preloader;"],"sourceRoot":""}